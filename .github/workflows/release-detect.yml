name: Release-Detect

permissions:
  contents: write

on:
  push:
    branches:
      - main

jobs:
  release-detection:
    name: Check for New Release
    runs-on: ubuntu-latest
    outputs:
      RELEASE: ${{ steps.check_release.outputs.RELEASE }}
      DEV_RELEASE: ${{ steps.check_dev_release.outputs.DEV_RELEASE }}
      MAJOR: ${{ steps.check_major.outputs.MAJOR }}
      MINOR: ${{ steps.check_minor.outputs.MINOR }}
      PATCH: ${{ steps.check_patch.outputs.PATCH }}
  
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
  
      # Step 2: Check if the commit message contains "release"
      - name: Check if the commit message contains "release"
        id: check_release
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"release"* ]]; then
            echo "RELEASE=true" >> $GITHUB_ENV
            echo "RELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "RELEASE=false" >> $GITHUB_ENV
            echo "RELEASE=false" >> $GITHUB_OUTPUT
          fi
  
      # Step 3: Check if the commit message contains "dev-release"
      - name: Check if the commit message contains "dev-release"
        id: check_dev_release
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"dev-release"* ]]; then
            echo "DEV_RELEASE=true" >> $GITHUB_ENV
            echo "DEV_RELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "DEV_RELEASE=false" >> $GITHUB_ENV
            echo "DEV_RELEASE=false" >> $GITHUB_OUTPUT
          fi
  
      # Step 4: Check if the commit message contains "major"
      - name: Check if the commit message contains "major"
        id: check_major
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"major"* ]]; then
            echo "MAJOR=true" >> $GITHUB_ENV
            echo "MAJOR=true" >> $GITHUB_OUTPUT
          else
            echo "MAJOR=false" >> $GITHUB_ENV
            echo "MAJOR=false" >> $GITHUB_OUTPUT
          fi
  
      # Step 5: Check if the commit message contains "minor"
      - name: Check if the commit message contains "minor"
        id: check_minor
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"minor"* ]]; then
            echo "MINOR=true" >> $GITHUB_ENV
            echo "MINOR=true" >> $GITHUB_OUTPUT
          else
            echo "MINOR=false" >> $GITHUB_ENV
            echo "MINOR=false" >> $GITHUB_OUTPUT
          fi
  
      # Step 6: Check if the commit message contains "patch"
      - name: Check if the commit message contains "patch"
        id: check_patch
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"patch"* ]]; then
            echo "PATCH=true" >> $GITHUB_ENV
            echo "PATCH=true" >> $GITHUB_OUTPUT
          else
            echo "PATCH=false" >> $GITHUB_ENV
            echo "PATCH=false" >> $GITHUB_OUTPUT
          fi

      # Step 7: Approval for release or dev-release
      - name: Manual Approval (Release or Dev-Release)
        if: ${{ needs.release-detection.outputs.RELEASE == 'true' || needs.release-detection.outputs.DEV_RELEASE == 'true' }}
        run: |
          echo "Please approve the release before continuing."

  trigger-build:
    needs: release-detection
    runs-on: ubuntu-latest
    steps:
      # Step 1: Trigger Build Workflow (conditional on release or non-release)
      - name: Trigger Build Workflow
        if: ${{ needs.release-detection.outputs.RELEASE == 'true' || needs.release-detection.outputs.DEV_RELEASE == 'true' || needs.release-detection.outputs.RELEASE == 'false' }}
        uses: ./.github/workflows/build.yml # Trigger build.yml file for both release and non-release scenarios

  release-artifacts:
    needs: trigger-build
    runs-on: ubuntu-latest
    if: ${{ needs.release-detection.outputs.RELEASE == 'true' }}
    steps:
      # Step 1: Upload Release Artifacts (for normal release)
      - name: Upload Release Artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/SCAN.bin
            build/bootloader/bootloader.bin
            build/SCAN.elf
            build/SCAN.map
          tag_name: ${{ env.NEW_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      # Step 2: Upload Dev Release Artifacts (for dev-release)
      - name: Upload Dev Release Artifacts
        if: ${{ needs.release-detection.outputs.DEV_RELEASE == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/**/*.bin
            build/*.elf
            build/*.map
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-artifacts:
    needs: trigger-build
    runs-on: ubuntu-latest
    if: ${{ needs.release-detection.outputs.RELEASE == 'false' && needs.release-detection.outputs.DEV_RELEASE == 'false' }}
    steps:
      # Step 1: Upload build artifacts for non-release pushes
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            build/**/*.bin
            build/*.elf
            build/*.map

  
