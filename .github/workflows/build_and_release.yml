name: Auto Versioning, Build, and Release

on:
  push:
    branches:
      - framework  # The workflow triggers on any push to `main`, or any other branch you configure

env:
  RELEASE: 0
  DEV_RELEASE: 0
  MAJOR: 0
  MINOR: 0
  PATCH: 0

jobs:
  version-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Check for special keywords in the commit message (e.g., "release", "dev-release", "major", "minor", "patch")
      - name: Check for release or dev-release in commit message
        if: ${{ github.event.head_commit.message }} == *"release"*
        run: |
          $RELEASE: 1
          run COMMIT_MESSAGE="${GITHUB_EVENT_HEAD_COMMIT_MESSAGE}"
          echo "Commit message: $COMMIT_MESSAGE"

          # Check if commit message contains "release" or "dev-release"
          if: [[ "$COMMIT_MESSAGE" == *"release"* ]]; then
            echo "Release detected."
            RELEASE=true
          fi

          if [[ "$COMMIT_MESSAGE" == *"dev-release"* ]]; then
            echo "Dev-release detected."
            DEV_RELEASE=true
          fi

          # Determine the version increment type (major, minor, patch)
          if [[ "$COMMIT_MESSAGE" == *"major"* ]]; then
            echo "Incrementing major version."
            MAJOR=true
          elif [[ "$COMMIT_MESSAGE" == *"minor"* ]]; then
            echo "Incrementing minor version."
            MINOR=true
          elif [[ "$COMMIT_MESSAGE" == *"patch"* ]]; then
            echo "Incrementing patch version."
            PATCH=true
          fi

  versioning:
    needs: version-release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && ($RELEASE == 'true' || $DEV_RELEASE == 'true')  # Only run if the commit is for a release or dev-release

    steps:
      # Step 1: Checkout the code again for this step
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Get the current version (for simplicity, this example uses npm, but you can adjust it for your versioning)
      - name: Get current version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Current version is $VERSION"

      # Step 3: Increment version based on commit message (major, minor, patch)
      - name: Increment version
        run: |
          if [ "$MAJOR" == 'true' ]; then
            NEW_VERSION=$(npm version major --no-git-tag-version)
          elif [ "$MINOR" == 'true' ]; then
            NEW_VERSION=$(npm version minor --no-git-tag-version)
          elif [ "$PATCH" == 'true' ]; then
            NEW_VERSION=$(npm version patch --no-git-tag-version)
          fi
          echo "New version is $NEW_VERSION"

      # Step 4: Handle tagging for dev-release or normal release
      - name: Create and push Git tag
        run: |
          if [ "$DEV_RELEASE" == 'true' ]; then
            TAG="$NEW_VERSION-dev"
          else
            TAG="$NEW_VERSION"
          fi
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag $TAG
          git push origin $TAG

  build:
    runs-on: ubuntu-latest
    needs: versioning
    if: github.event_name == 'push' && ($RELEASE == 'true' || $DEV_RELEASE == 'true')  # Run if release or dev-release

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Build the ESP-IDF Project
      - name: Build ESP-IDF Project
        run: docker run --rm \
              -v $GITHUB_WORKSPACE:/project \
              -w /project \
              -e HOME=/tmp \
              jjsprandel/scan:v1.0 idf.py build

      # Step 3: Upload the release artifacts (either regular or dev-release)
      - name: Upload Release Artifacts
        if: $RELEASE == 'true'  # Only for normal release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/**/*.bin
            build/*.elf
            build/*.map
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Dev Release Artifacts
        if: $DEV_RELEASE == 'true'  # Only for dev-release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/**/*.bin
            build/*.elf
            build/*.map
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Upload build artifacts for non-release pushes
      - name: Upload Build Artifacts
        if: $RELEASE != 'true' && $DEV_RELEASE != 'true'
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            build/**/*.bin
            build/*.elf
            build/*.map

  



