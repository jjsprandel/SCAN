name: Auto Versioning, Build, and Release

on:
  push:
    branches:
      - framework  # The workflow triggers on any push to `main`, or any other branch you configure

jobs:
  release-detection:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Check if the commit message contains "release"
      - name: Check if the commit message contains "release"
        id: check_release
        run: |
          COMMIT_MESSAGE="${GITHUB_EVENT_HEAD_COMMIT_MESSAGE}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"release"* ]]; then
            echo "RELEASE=true" >> $GITHUB_ENV
          fi

      # Step 3: Check if the commit message contains "dev-release"
      - name: Check if the commit message contains "dev-release"
        id: check_dev_release
        run: |
          COMMIT_MESSAGE="${GITHUB_EVENT_HEAD_COMMIT_MESSAGE}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"dev-release"* ]]; then
            echo "DEV_RELEASE=true" >> $GITHUB_ENV
          fi

      # Step 4: Set the version increment based on commit message
      - name: Check if the commit message contains "major"
        id: check_major
        run: |
          COMMIT_MESSAGE="${GITHUB_EVENT_HEAD_COMMIT_MESSAGE}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"major"* ]]; then
            echo "MAJOR=true" >> $GITHUB_ENV
          fi

      - name: Check if the commit message contains "minor"
        id: check_minor
        run: |
          COMMIT_MESSAGE="${GITHUB_EVENT_HEAD_COMMIT_MESSAGE}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"minor"* ]]; then
            echo "MINOR=true" >> $GITHUB_ENV
          fi

      - name: Check if the commit message contains "patch"
        id: check_patch
        run: |
          COMMIT_MESSAGE="${GITHUB_EVENT_HEAD_COMMIT_MESSAGE}"
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"patch"* ]]; then
            echo "PATCH=true" >> $GITHUB_ENV
          fi

  build:
    runs-on: ubuntu-latest
    needs: release-detection
    if: ${{ github.event_name == 'push' && (env.RELEASE == 'true' || env.DEV_RELEASE == 'true') }}  # Only run for release or dev-release commits

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Build the ESP-IDF Project
      - name: Build ESP-IDF Project
        run: docker run --rm \
              -v $GITHUB_WORKSPACE:/project \
              -w /project \
              -e HOME=/tmp \
              jjsprandel/scan:v1.0 idf.py build

      # Step 3: Upload the release artifacts (for normal release)
      - name: Upload Release Artifacts
        if: ${{ env.RELEASE == 'true' }}  # Only for normal release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/**/*.bin
            build/*.elf
            build/*.map
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Upload Dev Release Artifacts (for dev-release)
      - name: Upload Dev Release Artifacts
        if: ${{ env.DEV_RELEASE == 'true' }}  # Only for dev-release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/**/*.bin
            build/*.elf
            build/*.map
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Upload build artifacts for non-release pushes
      - name: Upload Build Artifacts
        if: ${{ env.RELEASE != 'true' && env.DEV_RELEASE != 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            build/**/*.bin
            build/*.elf
            build/*.map


  



